using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine;
using UnityEditor;
using Object = UnityEngine.Object;

public class PrefsEditorWindow : EditorWindow
{
#if UNITY_EDITOR

    public static List<Pref> prefs = new List<Pref>();

    #region Generated Script Data

    private string fileName;

    private string namespacePartOfScript =
        @"using NaughtyAttributes;
using Unisave;
using UnityEngine;
using System.Collections.Generic;
";

    private string classDefinitionStart =
        @"
public class PrefsManager : MonoBehaviour
{
";

    private string singleton =
        @"
    private static PrefsManager _instance = null;
    public static PrefsManager Instance => _instance;

    private void Awake()
    {
        if (_instance != null && _instance != this)
        {
            Destroy(this.gameObject);
        }
        _instance = this;
        
        UnisaveLocal.Load(this);
    }

    ";

    private string onDestroyString =
        @"

    /// <summary>
    /// Saves everything while this game object destroyed
    /// </summary>
    private void OnDestroy()
    {
        UnisaveLocal.Save(this);
    }

    ";

    private string classDefinitionEnd =
        @"
}
        ";

    #endregion

    private string[] dataTypeOptions = new[] {"bool", "int", "float", "List<int>"};

    // Just for finding PrefsManager.cs path and assign to fileName
    private void OnEnable()
    {
        fileName = Application.dataPath + "/Scripts/Managers/PrefsManager.cs";
    }

    /// <summary>
    /// Creates an instance of this editor window and show
    /// </summary>
    [MenuItem("Hifive Games/Prefs Editor")]
    public static void ShowPrefsEditorWindow()
    {
        EditorWindow window = EditorWindow.GetWindow(typeof(PrefsEditorWindow));
        window.titleContent = new GUIContent("Hifive Prefs Editor");
        window.minSize = new Vector2(250, 250);
        window.Focus();
    }

    private void OnGUI()
    {
        // Actual code goes here

        // Creates all Prefs from prefs list
        EditorGUILayout.BeginVertical();
        GUILayout.Space(10);

        for (int i = 0; i < prefs.Count; i++)
        {
            EditorGUILayout.BeginHorizontal("Box");
            EditorGUIUtility.labelWidth = 75;

            var pref = prefs[i];
            pref.PrefName =
                EditorGUILayout.TextField(new GUIContent("Pref Name:", "Use PrefGroupName.PrefName name convention"),
                    pref.PrefName);

            pref.DataTypeIndex = EditorGUILayout.Popup("Data Type:", pref.DataTypeIndex, dataTypeOptions);

            prefs[i] = new Pref {DataTypeIndex = pref.DataTypeIndex, PrefName = pref.PrefName};

            if (GUILayout.Button("X", GUILayout.MaxWidth(50)))
            {
                prefs.RemoveAt(i);
            }

            EditorGUILayout.EndHorizontal();
        }

        EditorGUILayout.EndVertical();

        // Just for spacing
        GUILayout.Space(50);

        // Adds two new button to window
        EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("Add New Pref"))
        {
            prefs.Add(new Pref());
        }

        if (GUILayout.Button("Generate Script"))
        {
            GenerateScript();
        }

        EditorGUILayout.EndHorizontal();
    }

    void GenerateScript()
    {
        // Check if file already exists. If yes, delete it.     
        if (File.Exists(fileName))
        {
            File.Delete(fileName);
        }

        // Create a new file     
        using (FileStream fs = File.Create(fileName))
        {
            // Add Author name, copyright etc
            Byte[] introText =
                new UTF8Encoding(true).GetBytes(
                    "// This script generated by Hifive Prefs Editor\n// Hifive Games - Gokhan Yahya TORBA 2020\n\n");
            fs.Write(introText, 0, introText.Length);

            // Add namespaces to text file
            Byte[] namespaceText = new UTF8Encoding(true).GetBytes(namespacePartOfScript);
            fs.Write(namespaceText, 0, namespaceText.Length);

            // Add class definition start part to text file
            Byte[] classDefinitionText = new UTF8Encoding(true).GetBytes(classDefinitionStart);
            fs.Write(classDefinitionText, 0, classDefinitionText.Length);

            // Add singleton script to text file
            Byte[] singletonText = new UTF8Encoding(true).GetBytes(singleton);
            fs.Write(singletonText, 0, singletonText.Length);

            // GENERATE CODE HERE!

            GenerateVariables(fs);
            GenerateFunctions(fs);

            // Add onDestroy script to text file
            Byte[] onDestroyText = new UTF8Encoding(true).GetBytes(onDestroyString);
            fs.Write(onDestroyText, 0, onDestroyText.Length);

            // Add class definition end to text file
            Byte[] classDefinitionEndText = new UTF8Encoding(true).GetBytes(classDefinitionEnd);
            fs.Write(classDefinitionEndText, 0, classDefinitionEndText.Length);
        }

        AssetDatabase.Refresh();
        EditorGUIUtility.PingObject(AssetDatabase.LoadAssetAtPath("Assets/Scripts/Managers/PrefsManager.cs",
            typeof(Object)));
    }

    void GenerateVariables(FileStream fs)
    {
        foreach (Pref pref in prefs)
        {
            switch (pref.DataTypeIndex)
            {
                case 0: // bool
                    // Attributes
                    Byte[] boolText = new UTF8Encoding(true)
                        .GetBytes("[SerializeField] [BoxGroup(\"" +
                                  pref.PrefName.Substring(0, pref.PrefName.IndexOf('.')) + "\")] [SavedAs(\"" +
                                  pref.PrefName + "\")]\n");
                    fs.Write(boolText, 0, boolText.Length);

                    // Variable
                    boolText = new UTF8Encoding(true)
                        .GetBytes("private bool " + pref.PrefName.Split('.')[1] + ";\n");
                    fs.Write(boolText, 0, boolText.Length);
                    break;
                case 1: // int
                    // Attributes
                    Byte[] intText = new UTF8Encoding(true)
                        .GetBytes("[SerializeField] [BoxGroup(\"" +
                                  pref.PrefName.Substring(0, pref.PrefName.IndexOf('.')) + "\")] [SavedAs(\"" +
                                  pref.PrefName + "\")]\n");
                    fs.Write(intText, 0, intText.Length);

                    // Variable
                    intText = new UTF8Encoding(true)
                        .GetBytes("private int " + pref.PrefName.Split('.')[1] + ";\n");
                    fs.Write(intText, 0, intText.Length);
                    break;
                case 2: // float
                    // Attributes
                    Byte[] floatText = new UTF8Encoding(true)
                        .GetBytes("[SerializeField] [BoxGroup(\"" +
                                  pref.PrefName.Substring(0, pref.PrefName.IndexOf('.')) + "\")] [SavedAs(\"" +
                                  pref.PrefName + "\")]\n");
                    fs.Write(floatText, 0, floatText.Length);

                    // Variable
                    floatText = new UTF8Encoding(true)
                        .GetBytes("private float " + pref.PrefName.Split('.')[1] + ";\n");
                    fs.Write(floatText, 0, floatText.Length);
                    break;
                case 3: // List<int>
                    // Attributes
                    Byte[] listText = new UTF8Encoding(true)
                        .GetBytes("[SerializeField] [BoxGroup(\"" +
                                  pref.PrefName.Substring(0, pref.PrefName.IndexOf('.')) + "\")] [SavedAs(\"" +
                                  pref.PrefName + "\")]\n");
                    fs.Write(listText, 0, listText.Length);

                    // Variable
                    listText = new UTF8Encoding(true)
                        .GetBytes("private List<int> " + pref.PrefName.Split('.')[1] + ";\n");
                    fs.Write(listText, 0, listText.Length);
                    break;
                default:
                    Debug.LogError("Error: Wrong Data Type Index!");
                    break;
            }
        }
        
    }

    void GenerateFunctions(FileStream fs)
    {
        foreach (Pref pref in prefs)
        {
            switch (pref.DataTypeIndex)
            {
                case 0: // bool
                    Byte[] boolText = new UTF8Encoding(true)
                        .GetBytes("public void Set" + pref.PrefName.Split('.')[1] + "(bool value) {" + pref.PrefName.Split('.')[1] + " = value; \n UnisaveLocal.Save(this);}");
                    fs.Write(boolText, 0, boolText.Length);
                    
                    boolText = new UTF8Encoding(true)
                        .GetBytes("public bool Get" + pref.PrefName.Split('.')[1] + "() { return " + pref.PrefName.Split('.')[1] + "; }\n");
                    fs.Write(boolText, 0, boolText.Length);
                    break;
                case 1: // int
                    
                    Byte[] intText = new UTF8Encoding(true)
                        .GetBytes("public void Set" + pref.PrefName.Split('.')[1] + "(int value) {" + pref.PrefName.Split('.')[1] + " = value; \nUnisaveLocal.Save(this);}");
                    fs.Write(intText, 0, intText.Length);

                    
                    intText = new UTF8Encoding(true)
                        .GetBytes("public int Get" + pref.PrefName.Split('.')[1] + "() { return " + pref.PrefName.Split('.')[1] + "; }\n");
                    fs.Write(intText, 0, intText.Length);
                    break;
                case 2: // float
                    
                    Byte[] floatText = new UTF8Encoding(true)
                        .GetBytes("public void Set" + pref.PrefName.Split('.')[1] + "(float value) {" + pref.PrefName.Split('.')[1] + " = value; \nUnisaveLocal.Save(this);}");
                    fs.Write(floatText, 0, floatText.Length);

                    
                    floatText = new UTF8Encoding(true)
                        .GetBytes("public float Get" + pref.PrefName.Split('.')[1] + "() { return " + pref.PrefName.Split('.')[1] + "; }\n");
                    fs.Write(floatText, 0, floatText.Length);
                    break;
                case 3: // List<int>
                    
                    Byte[] listText = new UTF8Encoding(true)
                        .GetBytes("public void Add" + pref.PrefName.Split('.')[1] + "(int value) {" + pref.PrefName.Split('.')[1] + ".Add(value); \nUnisaveLocal.Save(this);}");
                    fs.Write(listText, 0, listText.Length);
                    
                    listText = new UTF8Encoding(true)
                        .GetBytes("public void Remove" + pref.PrefName.Split('.')[1] + "(int value) {" + pref.PrefName.Split('.')[1] + ".Remove(value); \nUnisaveLocal.Save(this);}");
                    fs.Write(listText, 0, listText.Length);
                    
                    listText = new UTF8Encoding(true)
                        .GetBytes("public List<int> Get" + pref.PrefName.Split('.')[1] + "() { return " + pref.PrefName.Split('.')[1] + "; }\n");
                    fs.Write(listText, 0, listText.Length);
                    break;
                default:
                    Debug.LogError("Error: Wrong Data Type Index!");
                    break;
            }
        }
    }
    
#endif
}

/// <summary>
/// Contains PlayerPref name and its type
/// </summary>
public struct Pref
{
    public string PrefName { get; set; }
    public int DataTypeIndex { get; set; }
}